/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package a.clustered.word.counter;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;


/**
 *
 * @author Mohammed Alokshiya
 */
public class Master extends javax.swing.JFrame {

    private static final int FILE_MAX_SIZE = 4 * 1024 * 1024; // 4 MB for each file.
    private static JFileChooser fileChooser = new JFileChooser();
    private static File file;
    private static Scanner scanner;
    private static Queue<WorkerThread> availableWorkers = new LinkedList();
    private static Queue<WorkerThread> busyWorkers = new LinkedList();
    private static Queue<WorkerThread> finishedWorkers = new LinkedList();
    private static final int port = 4321;
    private static HashMap<String, Long> counter = new HashMap();
    private static int fileSequence = 0;
    private static ArrayList<FilePart> fileParts = new ArrayList();

    /**
     * Creates new form Master
     */
    public Master() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selector = new javax.swing.JButton();
        path = new javax.swing.JTextField();
        startCounting = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        result = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        status = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("A Clustered Word Counter V1.0");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("A Clustered Word Counter");

        jLabel2.setText("Please Choose a Text File:");

        selector.setText("...");
        selector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorActionPerformed(evt);
            }
        });

        path.setEditable(false);
        path.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathActionPerformed(evt);
            }
        });

        startCounting.setText("Start Counting");
        startCounting.setEnabled(false);
        startCounting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startCountingActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(result);

        jLabel3.setText("Status:");

        status.setText("Stopped");

        jLabel5.setText("Results:");

        jLabel6.setText("Mohammed Alokshiya");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(path)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selector, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(status)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(startCounting, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selector)
                    .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startCounting)
                        .addGap(0, 8, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(status)
                    .addComponent(jLabel6))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathActionPerformed
    }//GEN-LAST:event_pathActionPerformed

    private void selectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorActionPerformed
        fileChooser.setFileFilter(new TxtFilter());
        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            path.setText(file.getAbsolutePath());
            startCounting.setEnabled(true);
        }
    }//GEN-LAST:event_selectorActionPerformed

    private void startCountingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startCountingActionPerformed
        final long time = System.currentTimeMillis();
        if (availableWorkers.size() < 3) {
            JOptionPane.showMessageDialog(null, "You need at least 3 workers to complete this job!");
            return;
        }
        selector.setEnabled(false);
        
        try {
            scanner = new Scanner(file);
            status.setText("Distributing File ..");
            distributeFile (scanner, file);
            status.setText("Mapping Phase ..");
            int mappedFiles = 0;
            FilePart part;
            while (mappedFiles < fileParts.size()) {
                if (!availableWorkers.isEmpty()) {
                    WorkerThread worker = availableWorkers.remove();
                    if (worker.listOfIdleFiles.isEmpty()) {
                        finishedWorkers.add(worker);
                    }
                    else {
                        loop:
                        while (!worker.listOfIdleFiles.isEmpty()) {
                            part = worker.listOfIdleFiles.remove(0);
                            synchronized (part) {
                                if (part.status == 0) {
                                    part.status = 1;
                                    worker.listOfMappedFiles.add(part);
                                    mappedFiles++;
                                    part.mapper = worker;
                                    worker.out.println("MAP_COUNT_WORDS Part_" + part.part);
                                    break loop;
                                }
                            }
                        }
                    }
                }
            }
            // SHUFFLE AND SORT PHASE
            for (WorkerThread workerThread : availableWorkers) {
                StringBuilder sb = new StringBuilder("SHUFFLE_SORT_PHASE");
                for (FilePart file : workerThread.listOfMappedFiles) {
                    sb.append(" ");
                    sb.append(file.name);
                }
                workerThread.out.println(sb.toString());
            }
            
            String minKey;
            PrintWriter middleValues = new PrintWriter(new File("MiddleValues"));
            while (true) {
                for (WorkerThread workerThread : availableWorkers) {
                    workerThread.out.println("GET_KEYS");
                }
                minKey = null;
                for (WorkerThread workerThread : availableWorkers) {
                    for (int i = 1; i < workerThread.keys.length; i++) {
                        if (minKey == null)
                            minKey = (String) workerThread.keys[i];
                        else if (minKey.compareTo(workerThread.keys[i]) < 0)
                            minKey = workerThread.keys[i];
                    }
                }
                if (minKey == null)
                    break;
                middleValues.println("KEY " + minKey);
                for (WorkerThread workerThread : availableWorkers) {
                    workerThread.out.println("GET_VALUES ");
                }
                for (WorkerThread workerThread : availableWorkers) {
                    for (int i = 1; i < workerThread.values.length; i++) {
                        middleValues.println(workerThread.values[i]);
                    }
                }
            }
            middleValues.close();
            for (WorkerThread workerThread : availableWorkers) {
                workerThread.out.println("END_OF_SHUFFLE_SORT ");
            }
            // REDUCE PHASE
            Scanner ShuffledSortedMiddleValues = new Scanner(new File("MiddleValues"));
            String w = ShuffledSortedMiddleValues.nextLine();
            String key = w.substring(w.indexOf(" ") + 1);
            while (ShuffledSortedMiddleValues.hasNextLine()) {
                if (!availableWorkers.isEmpty()) {
                    WorkerThread worker = availableWorkers.remove();
                    busyWorkers.add(worker);
                    StringBuilder sb = new StringBuilder("REDUCE_COUNT_WORDS ");
                    sb.append(key);
                    while (ShuffledSortedMiddleValues.hasNextLine()) {
                        w = ShuffledSortedMiddleValues.nextLine();
                        if (w.startsWith("KEY ")) {
                            key = w.substring(w.indexOf(" ") + 1);
                            worker.out.println(sb.toString());
                            break;
                        }
                        else {
                            sb.append(" ");
                            sb.append(w);
                        }
                    }
                    worker.out.println(sb.toString()); // for the last reduce process
                }
            }
            
            final Timer timer = new Timer();
            timer.schedule(new TimerTask() {

                @Override
                public void run() {
                    if (busyWorkers.isEmpty()) {
                        result.setText("");
                        StringBuilder s = new StringBuilder();
                        for (String word : counter.keySet()) {
                            s.append(word + "\t" + counter.get(word) + "\n");
                        }
                        result.setText(s.toString());
                        counter.clear();
                        status.setText("Finished");
                        selector.setEnabled(true);
                        
                        System.out.println(System.currentTimeMillis() - time);
                        timer.cancel();
                    }
                }
            }, 0, 1000);

        } catch (FileNotFoundException ex) {
            //Logger.getLogger(Master.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_startCountingActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Master.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Master.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Master.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Master.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Master().setVisible(true);
            }
        });

        ServerSocket master = new ServerSocket(port);
        try {
            while (true) {
                new WorkerThread(master.accept()).start();
            }
        } finally {
            master.close();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField path;
    private javax.swing.JTextPane result;
    private javax.swing.JButton selector;
    private javax.swing.JButton startCounting;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables

    private void distributeFile(Scanner scanner, File file) {
        if (availableWorkers.size() < 3) {
            JOptionPane.showMessageDialog(null, "You need at least 3 workers to complete this job!");
            return;
        }
        fileSequence = 0;
        fileParts.clear();
        for (int i = 0; i < availableWorkers.size(); i++) {
            WorkerThread worker = availableWorkers.remove();
            worker.listOfIdleFiles.clear();
            worker.listOfMappedFiles.clear();
            availableWorkers.add(worker);
        }
        while (scanner.hasNextLine()) {
            fileSequence++;
            WorkerThread worker1 = availableWorkers.remove();
            WorkerThread worker2 = availableWorkers.remove();
            WorkerThread worker3 = availableWorkers.remove();
            FilePart part = new FilePart(fileSequence, "Part_" + fileSequence, worker1, worker2, worker3);
            int size = 0;
            String line;
            worker1.out.println("NEW_FILE Part_" + fileSequence);
            worker2.out.println("NEW_FILE Part_" + fileSequence);
            worker3.out.println("NEW_FILE Part_" + fileSequence);
            while (scanner.hasNextLine()) {
                line = scanner.nextLine();
                worker1.out.println(line);
                worker2.out.println(line);
                worker3.out.println(line);
                size += line.length();
                if (size >= FILE_MAX_SIZE)
                    break;
            }
            worker1.out.println("END_OF_FILE");
            worker2.out.println("END_OF_FILE");
            worker3.out.println("END_OF_FILE");
            worker1.listOfIdleFiles.add(part);
            worker2.listOfIdleFiles.add(part);
            worker3.listOfIdleFiles.add(part);
            availableWorkers.add(worker1);
            availableWorkers.add(worker2);
            availableWorkers.add(worker3);
            fileParts.add (part);
        }
    }
    
    private class FilePart {
        int part;
        String name;
        /*
         * idle = 0
         * in_progress = 1
         * mapped = 2
         */
        int status = 0; // idle
        WorkerThread mapper;
        WorkerThread [] fileHandlers = new WorkerThread[3];
        
        public FilePart (int part, String name, WorkerThread worker0, WorkerThread worker1, WorkerThread worker2) {
            this.part = part;
            this.name = name;
            fileHandlers[0] = worker0;
            fileHandlers[1] = worker1;
            fileHandlers[2] = worker2;
            mapper = null;
        }
    }

    private static class WorkerThread extends Thread {

        private Socket socket;
        private BufferedReader in;
        private PrintWriter out;
        private ArrayList<FilePart> listOfIdleFiles = new ArrayList();
        private ArrayList<FilePart> listOfMappedFiles = new ArrayList();
        private String [] keys;
        private String [] values;
        public WorkerThread(Socket socket) {
            this.socket = socket;
            availableWorkers.add(this);
        }

        @Override
        public void run() {
            try {
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream());
                System.out.println("A new worker registered. # of Available workers is: " + availableWorkers.size());
                String line;
                
                while (true) {
                    line = in.readLine();
                    if (line == null) {
                        return;
                    }
                    if (line.startsWith("MAP_COMPLETE")) {
                        int fileID = Integer.parseInt(line.substring(26));
                        FilePart part = fileParts.get(fileID - 1);
                        part.status = 2;
                        availableWorkers.add(this);
                        
                    }
                    else if (line.startsWith("REDUCE_COMPLETE ")) {
                        String [] arr = line.split(" ");
                        synchronized (counter) {
                            counter.put(arr[1], Long.parseLong(arr[2]));
                        }
                        availableWorkers.add(this);
                        busyWorkers.remove(this);
                    }
                    else if (line.startsWith("KEYS")) {
                        keys = line.split(" ");
                    }
                }
            } catch (SocketException se) {
                System.out.println("Client Donw");
            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (availableWorkers.contains(this)) {
                    availableWorkers.remove(this);
                }
                System.out.println("A worker disconnected. # of Available workers is: " + availableWorkers.size());
            }
        }
    }

    private static class TxtFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            return f.getName().toLowerCase().endsWith(".txt") || f.isDirectory();
        }

        @Override
        public String getDescription() {
            return "Text files (*.txt)";
        }
    }
}