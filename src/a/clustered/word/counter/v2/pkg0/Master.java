/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package a.clustered.word.counter.v2.pkg0;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.*;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Mohammed Alokshiya
 */
public class Master extends javax.swing.JFrame {

    private Vector<String> filesNames = new Vector();
    static private ArrayList<File> files = new ArrayList();
    private HashSet<String> filesPathes = new HashSet();
    static HashMap<String, int[]> wordCounter = new HashMap();
    private static PriorityBlockingQueue<WorkerThread> availableWorkers = new PriorityBlockingQueue();
    private static Integer fileInProgress = 0;
    private static Integer processInProgress = 0;
    
    
    /**
     * Creates new form Master
     */
    public Master() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("A Clustered Word Counter V2.0");
        setResizable(false);

        jScrollPane1.setViewportView(jList1);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/clustered/word/counter/v2/icons/Add-icon.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("List of Files:");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/clustered/word/counter/v2/icons/DeleteRed.png"))); // NOI18N
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Start");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Results:");

        jLabel3.setText("Statistics:");

        jTextPane2.setEditable(false);
        jScrollPane3.setViewportView(jTextPane2);

        jButton4.setText("Search");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setText("Status:");

        jLabel5.setText("Ready");

        jLabel6.setText("Mohammed Alokshiya");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Word", "Count"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(452, 452, 452))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new TxtFilter());
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (filesPathes.contains(file.getAbsolutePath())) {
                JOptionPane.showMessageDialog(null, "The file already exists");
            } else {
                files.add(file);
                filesPathes.add(file.getAbsolutePath());
                filesNames.add(file.getName());
                jList1.setListData(filesNames);
                checkEnabled();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int index = jList1.getSelectedIndex();
        if (index < 0) {
            JOptionPane.showMessageDialog(null, "You must select a file to be removed");
        } else {
            File file = files.remove(index);
            filesPathes.remove(file.getAbsolutePath());
            filesNames.remove(index);
            jList1.setListData(filesNames);
            checkEnabled();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (availableWorkers.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No Available Workers!");
            return;
        }
        wordCounter.clear();
        final Long time = System.currentTimeMillis();
        jLabel5.setText("Running ..");
        fileInProgress = files.size();
        FileMapper.counter = 1;
        for (int i = 0; i < files.size(); i++) {
            try {
                new FileMapper(new Scanner(files.get(i))).start();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Master.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        this.setEnabled(false);
        final Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                if (processInProgress == 0 && fileInProgress == 0) {
                    //printOutput();
                    SortClass[] allWords = new SortClass[wordCounter.keySet().size()];
                    long sum = 0;
                    int i = 0;
                    for (String word : wordCounter.keySet()) {
                        SortClass p = new SortClass(word, wordCounter.get(word));
                        sum += p.frequency[0];
                        allWords[i++] = p;
                        if (i == allWords.length) {
                            break;
                        }
                    }
                    
                    Master.this.setEnabled(true);
                    jLabel5.setText("Finished");
                    Arrays.sort(allWords);
                    Object [][] data = new Object[allWords.length][files.size() + 2];
                    String [] columnStrings = new String[files.size() + 2];
                    columnStrings[0] = "Word";
                    columnStrings[1] = "All Files";
                    for (int j = 2; j < columnStrings.length; j++) {
                        columnStrings[j] = filesNames.get(j - 2);
                    }
                    int [] temp;
                    
                    for (int j = 0; j < allWords.length; j++) {
                        data[j][0] = allWords[j].word;
                        temp = allWords[j].frequency;
                        for (int k = 0; k < temp.length; k++) {
                            data[j][k + 1] = temp[k];
                        }
                    }
                    
                    TableModel model = new DefaultTableModel(data, columnStrings);
                    jTable1.setModel(model);
                    
                    StringBuilder statistics = new StringBuilder();
                    statistics.append("<b>Number of Processed Files: </b>" + files.size() + "<br>");
                    statistics.append("<b>Number of Workers: </b>" + availableWorkers.size() + "<br>");
                    statistics.append("<b>Number of Distinct Words in All Files: </b>" + allWords.length + "<br>");
                    statistics.append("<b>Number of Total Words in All Files: </b>" + sum + "<br>");
                    statistics.append("<b>Total Time: </b>" + (System.currentTimeMillis() - time) + "ms<br>");
                    jTextPane2.setContentType("text/html");
                    jTextPane2.setText(statistics.toString());
                    timer.cancel();
                }
            }
        }, 0, 100);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String s = JOptionPane.showInputDialog(rootPane, "Search about what?");
        if (s != null) {
            StringBuilder searchResults = new StringBuilder();
            searchResults.append("<b>Search Results for \"" + s + "\":</b><br>");
            Scanner in;
            String line = null;
            int i = 0;
            if (wordCounter.size() == 0) {
                i = JOptionPane.showConfirmDialog(rootPane, "You have to make an index first!");
                if (i == 0)
                    jButton3ActionPerformed(null);
            }
            
            if (i == 0) {
                int [] indices = wordCounter.get(s.toLowerCase());
                if (indices == null) {
                    searchResults.append("Not Found!");
                } else {
                    outer: 
                    for (int j = 1; j < indices.length; j++) {
                        if (indices[j] > 0) {
                            try {
                                in = new Scanner(files.get(j - 1));
                                for (int k = 0; k < indices[j]; k++) {
                                    line = in.nextLine();
                                    if (line.contains(s)) {
                                        int ind = line.indexOf(s);
                                        searchResults.append(line.substring(0, ind) + "<b>" + s + "</b>" + line.substring(ind + s.length()) + "<br>");
                                        if (k >= 50) {
                                            break outer;
                                        }
                                    }
                                    else if (in.hasNextLine())
                                        k--;
                                }
                            } catch (FileNotFoundException ex) {
                            }
                        }
                    }
                }
            }
            jTextPane2.setContentType("text/html");
            jTextPane2.setText(searchResults.toString());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Master.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Master.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Master.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Master.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Master().setVisible(true);
            }
        });

        ServerSocket server = new ServerSocket(4321);
        try {
            while (true) {
                new WorkerThread(server.accept()).start();

            }
        } finally {
            server.close();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane jTextPane2;
    // End of variables declaration//GEN-END:variables

    private void checkEnabled() {
        if (files.isEmpty()) {
            jButton2.setEnabled(false);
            jButton3.setEnabled(false);
            jButton4.setEnabled(false);
        } else {
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
        }
    }

    private final static class TxtFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            return f.getName().toLowerCase().endsWith(".txt") || f.isDirectory();
        }

        @Override
        public String getDescription() {
            return "Text files (*.txt)";
        }
    }

    private static class WorkerThread extends Thread implements Comparable<WorkerThread> {

        private Socket socket;
        private long value;
        private ObjectInputStream in;
        private ObjectOutputStream out;
        private String[] currentTask;
        private int currentFile;

        public WorkerThread(Socket socket) {
            this.socket = socket;
            value = 1;
            availableWorkers.add(this);
        }

        @Override
        public void run() {
            try {
                out = new ObjectOutputStream(socket.getOutputStream());
                System.out.println("A new worker registered. # of Available workers is: " + availableWorkers.size());
                HashMap<String, Integer> hashMap = null;
                int fileID;
                in = new ObjectInputStream(socket.getInputStream());
                while (true) {
                    fileID = (int) in.readObject();
                    hashMap = (HashMap) in.readObject();
                    value = (long) in.readObject();
                    reduce(hashMap, fileID);
                    currentTask = null;
                    availableWorkers.add(this);
                }
            } catch (ClassNotFoundException ex) {
                System.out.println("Exception");
            } catch (SocketException ex) {
                if (currentTask != null) {
                    System.out.println("Worker down .. the current task will be assigned to another worker!");
                    while (availableWorkers.isEmpty()) {
                    }
                    WorkerThread workerThread = availableWorkers.remove();
                    workerThread.map(currentTask, currentFile);
                    synchronized (processInProgress) {
                        processInProgress--;
                    }
                }
                if (availableWorkers.contains(this)) {
                    availableWorkers.remove(this);
                }

            } catch (IOException ex) {
            }
        }

        public void map(String[] s, int fileID) {
            try {
                out.writeObject(fileID);
                out.writeObject(s);
                currentTask = s;
                currentFile = fileID;
            } catch (IOException ex) {
                System.out.println("Error!");
            }
        }

        public void reduce(HashMap<String, Integer> hashMap, int fileID) {
            int [] counters;
            int count;
            for (String string : hashMap.keySet()) {
                count = hashMap.get(string);
                synchronized (wordCounter) {
                    if (wordCounter.containsKey(string)) {
                        counters = wordCounter.remove(string);
                    } else {
                        counters = new int[files.size() + 1];
                    }
                    counters[0] += count;
                    counters[fileID] += count;
                    wordCounter.put(string, counters);
                }
            }
            synchronized (processInProgress) {
                processInProgress--;
            }
        }

        @Override
        public int compareTo(WorkerThread o) {
            if (value >= o.value) {
                return 1;
            } else {
                return -1;
            }
        }
    }

    private static class FileMapper extends Thread {

        private Scanner scanner;
        static int counter = 1;
        private int id;

        public FileMapper(Scanner scanner) {
            this.scanner = scanner;
            id = counter++;
        }

        @Override
        public void run() {
            try {
                String[] array;
                while (scanner.hasNextLine()) {
                    array = new String[100000];
                    for (int i = 0; scanner.hasNextLine() && i < array.length; i++) {
                        array[i] = scanner.nextLine();
                    }
                    while (availableWorkers.isEmpty()) {
                    }
                    WorkerThread workerThread = availableWorkers.poll();
                    synchronized (processInProgress) {
                        processInProgress++;
                    }
                    workerThread.map(array, id);
                }
                synchronized (fileInProgress) {
                    fileInProgress--;
                }
            }
            catch (Exception e) {}
        }
    }
}

class SortClass implements Comparable<SortClass> {

    String word;
    int[] frequency;

    public SortClass(String word, int[] frequency) {
        this.word = word;
        this.frequency = frequency;
    }

    @Override
    public int compareTo(SortClass o) {
        return o.frequency[0] - frequency[0];
    }
}